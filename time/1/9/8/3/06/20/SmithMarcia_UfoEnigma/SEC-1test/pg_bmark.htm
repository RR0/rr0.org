<html>
<head>
  <style type="text/css"><!--
  body {
    margin-top: 5px;
    margin-right: 5px;
    margin-bottom: 5px;
    margin-left: 5px;
    background-color: #FFFFFF
  }

  .toolbar {
    width: 20px;
    font: 12px Verdana, Arial, Helvetica, sans-serif;
    color: #000000;
    margin-top: -1px;
    margin-right: 0px;
    margin-bottom: 0px;
    margin-left: 0px
  }

  img {
    border: 0
  }

  A:link {
    text-decoration: none;
    color: blue
  }

  A:visited {
    text-decoration: none;
    color: purple
  }

  A:active {
    text-decoration: red
  }

  A:hover {
    text-decoration: underline;
    color: red
  }

  -->
  </style>
  <script language="javascript">
    <!--
    hide

    function killerrors() {
      return true
    }

    window.onerror = killerrors
    // -->
  </script>
  <link rel="stylesheet" href="../../../../../../../../../Documents/Officiels/SmithMarcia/SEC-1test/ftie4style.css">

  <!-- Infrastructure code for the tree -->
  <script>
    //////////////////////////////////////////////////////////////
    //
    //  Description	: PDF2HTML software
    //  Author	: verypdf.com Inc
    //  Version	: Ver1.2
    //  Platform	: Windows95/98/Me/NT/2000/XP, IE4/IE5/IE6
    //  Date	: 2002/04/03
    //
    //  Copyright(C) 2000--2003 verypdf.com Inc
    //
    //  Contact infomation:
    //        https://www.verypdf.com/
    //        https://www.globalpdf.com/
    //        https://www.toppdf.com/
    //
    //        support@verypdf.com
    //
    //////////////////////////////////////////////////////////////
    function MyGotoPage(newPage) {
      parent.ltop.gotopage(newPage)
    }

    function Folder(folderDescription, hreference) //constructor
    {
      //constant data
      this.desc = folderDescription
      this.hreference = hreference
      this.id = -1
      this.navObj = 0
      this.iconImg = 0
      this.nodeImg = 0
      this.isLastNode = 0

      //dynamic data
      this.isOpen = true
      this.iconSrc = "pg_bopen.gif"
      this.children = new Array
      this.nChildren = 0

      //methods
      this.initialize = initializeFolder
      this.setState = setStateFolder
      this.addChild = addChild
      this.createIndex = createEntryIndex
      this.hide = hideFolder
      this.display = display
      this.renderOb = drawFolder
      this.totalHeight = totalHeight
      this.subEntries = folderSubEntries
      this.outputLink = outputFolderLink
    }

    function setStateFolder(isOpen) {
      var subEntries
      var totalHeight
      var fIt = 0
      var i = 0

      if (isOpen == this.isOpen)
        return

      if (browserVersion == 2) {
        totalHeight = 0
        for (i = 0; i < this.nChildren; i++)
          totalHeight = totalHeight + this.children[i].navObj.clip.height
        subEntries = this.subEntries()
        if (this.isOpen)
          totalHeight = 0 - totalHeight
        for (fIt = this.id + subEntries + 1; fIt < nEntries; fIt++)
          indexOfEntries[fIt].navObj.moveBy(0, totalHeight)
      }
      this.isOpen = isOpen
      propagateChangesInState(this)
    }

    function propagateChangesInState(folder) {
      var i = 0

      if (folder.isOpen) {
        if (folder.nodeImg)
          if (folder.isLastNode)
            folder.nodeImg.src = "pg_bmlastnode.gif"
          else
            folder.nodeImg.src = "pg_bmnode.gif"
        folder.iconImg.src = "pg_bopen.gif"
        for (i = 0; i < folder.nChildren; i++)
          folder.children[i].display()
      } else {
        if (folder.nodeImg)
          if (folder.isLastNode)
            folder.nodeImg.src = "pg_bplastnode.gif"
          else
            folder.nodeImg.src = "pg_bpnode.gif"
        folder.iconImg.src = "pg_bclosed.gif"
        for (i = 0; i < folder.nChildren; i++)
          folder.children[i].hide()
      }
    }

    function hideFolder() {
      if (browserVersion == 1) {
        if (this.navObj.style.display == "none")
          return
        this.navObj.style.display = "none"
      } else {
        if (this.navObj.visibility == "hiden")
          return
        this.navObj.visibility = "hiden"
      }

      this.setState(0)
    }

    function initializeFolder(level, lastNode, leftSide) {
      var j = 0
      var i = 0
      var numberOfFolders
      var numberOfDocs
      var nc

      nc = this.nChildren

      this.createIndex()

      var auxEv = ""

      if (browserVersion > 0)
        auxEv = "<a href='javascript:clickOnNode(" + this.id + ")'>"
      else
        auxEv = "<a>"

      if (level > 0)
        if (lastNode) //the last 'brother' in the children array
        {
          this.renderOb(leftSide + auxEv + "<img name='nodeIcon" + this.id + "' src='pg_bmlastnode.gif' width=16 height=22 border=0></a>")
          leftSide = leftSide + "<img src='pg_bblank.gif' width=16 height=22>"
          this.isLastNode = 1
        } else {
          this.renderOb(leftSide + auxEv + "<img name='nodeIcon" + this.id + "' src='pg_bmnode.gif' width=16 height=22 border=0></a>")
          leftSide = leftSide + "<img src='pg_bvertline.gif' width=16 height=22>"
          this.isLastNode = 0
        }
      else
        this.renderOb("")

      if (nc > 0) {
        level = level + 1
        for (i = 0; i < this.nChildren; i++) {
          if (i == this.nChildren - 1)
            this.children[i].initialize(level, 1, leftSide)
          else
            this.children[i].initialize(level, 0, leftSide)
        }
      }
    }

    function drawFolder(leftSide) {
      if (browserVersion == 2) {
        if (!doc.yPos)
          doc.yPos = 8
        doc.write("<layer id='folder" + this.id + "' top=" + doc.yPos + " visibility=hiden>")
      }

      doc.write("<table class='toolbar' ")
      if (browserVersion == 1)
        doc.write(" id='folder" + this.id + "' style='position:block;' ")
      doc.write(" border=0 cellspacing=0 cellpadding=0>")
      doc.write("<tr><td>")
      doc.write(leftSide)
      this.outputLink()
      doc.write("<img name='folderIcon" + this.id + "' ")
      doc.write("src='" + this.iconSrc + "' border=0></a>")
      doc.write("</td><td valign=middle nowrap>")
      if (USETEXTLINKS) {
        this.outputLink()
        doc.write(this.desc + "</a>")
      } else
        doc.write(this.desc)
      doc.write("</td>")
      doc.write("</table>")

      if (browserVersion == 2) {
        doc.write("</layer>")
      }

      if (browserVersion == 1) {
        this.navObj = doc.all["folder" + this.id]
        this.iconImg = doc.all["folderIcon" + this.id]
        this.nodeImg = doc.all["nodeIcon" + this.id]
      } else if (browserVersion == 2) {
        this.navObj = doc.layers["folder" + this.id]
        this.iconImg = this.navObj.document.images["folderIcon" + this.id]
        this.nodeImg = this.navObj.document.images["nodeIcon" + this.id]
        doc.yPos = doc.yPos + this.navObj.clip.height
      }
    }

    function outputFolderLink() {
      if (this.hreference) {
        //doc.write("<a href='" + this.hreference + "' TARGET=\"contents\" ")
        //<a href="#" onClick="javascript:MyGotoPage(); return false">
        doc.write("<a href='#' onClick='javascript:MyGotoPage(" + this.hreference + "); return false'")
        if (browserVersion > 0)
          doc.write("onClick='javascript:clickOnFolder(" + this.id + ")'")
        doc.write(">")
      } else
        doc.write("<a>")
//  doc.write("<a href='javascript:clickOnFolder("+this.id+")'>")
    }

    function addChild(childNode) {
      this.children[this.nChildren] = childNode
      this.nChildren++
      return childNode
    }

    function folderSubEntries() {
      var i = 0
      var se = this.nChildren

      for (i = 0; i < this.nChildren; i++) {
        if (this.children[i].children) //is a folder
          se = se + this.children[i].subEntries()
      }

      return se
    }


    // Definition of class Item (a document or link inside a Folder)
    // *************************************************************

    function Item(itemDescription, itemLink) // Constructor
    {
      // constant data
      this.desc = itemDescription
      this.link = itemLink
      this.id = -1 //initialized in initalize()
      this.navObj = 0 //initialized in render()
      this.iconImg = 0 //initialized in render()
      this.iconSrc = "pg_bdoc.gif"

      // methods
      this.initialize = initializeItem
      this.createIndex = createEntryIndex
      this.hide = hideItem
      this.display = display
      this.renderOb = drawItem
      this.totalHeight = totalHeight
    }

    function hideItem() {
      if (browserVersion == 1) {
        if (this.navObj.style.display == "none")
          return
        this.navObj.style.display = "none"
      } else {
        if (this.navObj.visibility == "hiden")
          return
        this.navObj.visibility = "hiden"
      }
    }

    function initializeItem(level, lastNode, leftSide) {
      this.createIndex()

      if (level > 0)
        if (lastNode) //the last 'brother' in the children array
        {
          this.renderOb(leftSide + "<img src='pg_blastnode.gif' width=16 height=22>")
          leftSide = leftSide + "<img src='pg_bblank.gif' width=16 height=22>"
        } else {
          this.renderOb(leftSide + "<img src='pg_bnode.gif' width=16 height=22>")
          leftSide = leftSide + "<img src='pg_bvertline.gif' width=16 height=22>"
        }
      else
        this.renderOb("")
    }

    function drawItem(leftSide) {
      if (browserVersion == 2)
        doc.write("<layer id='item" + this.id + "' top=" + doc.yPos + " visibility=hiden>")

      doc.write("<table class='toolbar' ")
      if (browserVersion == 1)
        doc.write(" id='item" + this.id + "' style='position:block;' ")
      doc.write(" border=0 cellspacing=0 cellpadding=0>")
      doc.write("<tr><td>")
      doc.write(leftSide)
      doc.write("<a href=" + this.link + ">")
      doc.write("<img id='itemIcon" + this.id + "' ")
      doc.write("src='" + this.iconSrc + "' border=0>")
      doc.write("</a>")
      doc.write("</td><td valign=middle nowrap>")
      if (USETEXTLINKS)
        doc.write("<a href=" + this.link + ">" + this.desc + "</a>")
      else
        doc.write(this.desc)
      doc.write("</table>")

      if (browserVersion == 2)
        doc.write("</layer>")

      if (browserVersion == 1) {
        this.navObj = doc.all["item" + this.id]
        this.iconImg = doc.all["itemIcon" + this.id]
      } else if (browserVersion == 2) {
        this.navObj = doc.layers["item" + this.id]
        this.iconImg = this.navObj.document.images["itemIcon" + this.id]
        doc.yPos = doc.yPos + this.navObj.clip.height
      }
    }


    // Methods common to both objects (pseudo-inheritance)
    // ********************************************************

    function display() {
      if (browserVersion == 1)
        this.navObj.style.display = "block"
      else
        this.navObj.visibility = "show"
    }

    function createEntryIndex() {
      this.id = nEntries
      indexOfEntries[nEntries] = this
      nEntries++
    }

    // total height of subEntries open
    function totalHeight() //used with browserVersion == 2
    {
      var h = this.navObj.clip.height
      var i = 0

      if (this.isOpen) //is a folder and _is_ open
        for (i = 0; i < this.nChildren; i++)
          h = h + this.children[i].totalHeight()

      return h
    }


    // Events
    // *********************************************************

    function clickOnFolder(folderId) {
      var clicked = indexOfEntries[folderId]

      if (!clicked.isOpen)
        clickOnNode(folderId)

      return

      if (clicked.isSelected)
        return
    }

    function clickOnNode(folderId) {
      var clickedFolder = 0
      var state = 0

      clickedFolder = indexOfEntries[folderId]
      state = clickedFolder.isOpen

      clickedFolder.setState(!state) //open<->close
    }

    function initializeDocument() {
      if (doc.all)
        browserVersion = 1 //IE4
      else if (doc.layers)
        browserVersion = 2 //NS4
      else
        browserVersion = 0 //other

      root0.initialize(0, 1, "")
      root0.display()

      if (browserVersion > 0) {
        doc.write("<layer top=" + indexOfEntries[nEntries - 1].navObj.top + "> </layer>")

        // close the whole tree
        clickOnNode(0)
        // open the root folder
        clickOnNode(0)
      }
    }

    // Auxiliary Functions for Folder-Treee backward compatibility
    // *********************************************************

    function gFld(description, hreference) {
      folder = new Folder(description, hreference)
      return folder
    }

    function gLnk(target, description, linkData) {
      fullLink = ""

      if (target == 0) {
        fullLink = "'" + linkData + "' target=\"basefrm\""
      } else {
        //if (target==1)
        //   fullLink = "'https://"+linkData+"' target=_blank"
        //else
        //   fullLink = "'https://"+linkData+"' target=\"basefrm\""
        fullLink = "'#' onClick='javascript:MyGotoPage(" + linkData + "); return false'"
      }
      linkItem = new Item(description, fullLink)
      return linkItem
    }

    function insFld(parentFolder, childFolder) {
      return parentFolder.addChild(childFolder)
    }

    function insDoc(parentFolder, document) {
      parentFolder.addChild(document)
    }

    // Global variables
    // ****************

    USETEXTLINKS = 1
    indexOfEntries = new Array
    nEntries = 0
    doc = document
    browserVersion = 0
    selectedFolder = 0

  </script>

  <!-- Execution of the code that actually builds the specific tree -->
  <script>
    root0 = gFld("SEC-1", "")
    root0 = gFld("Your pdf file doesn't contain bookmarks", "")
  </script>
  <script>initializeDocument()</script>
</head>
<body bgcolor="white" style="border-right: 2 solid #CCCCCC">
</body>
</html>
